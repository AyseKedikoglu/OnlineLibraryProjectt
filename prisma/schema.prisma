// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String         @default("USER")
  createdAt     DateTime       @default(now())
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  borrowedBooks BorrowedBook[]
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  logs          Log[]
  profile       Profile?
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  updatedAt DateTime @updatedAt
}

model Book {
  id            String         @id @default(cuid())
  title         String
  author        String
  category      String
  description   String
  status        String         @default("AVAILABLE")
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  borrowedBooks BorrowedBook[]
  imageUrl      String?

  @@index([userId])
}

model BorrowedBook {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  borrowDate DateTime @default(now())
  returnDate DateTime?
  user       User     @relation(fields: [userId], references: [id])
  book       Book     @relation(fields: [bookId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([bookId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  fromUserId String
  toUserId   String
  fromUser   User     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  action    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
} 